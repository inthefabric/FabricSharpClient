<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.Clients.Cs.Infrastructure/bin/Debug/Fabric.Clients.Cs.Infrastructure.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Fabric.Clients.Cs.Infrastructure" #>
<#@ import namespace="Fabric.Clients.Cs.Infrastructure.SpecDto" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

namespace Fabric.Clients.Cs.Gen {

	// ReSharper disable InconsistentNaming

<#
FabSpec spec = SpecBuilder.Spec;
FabSpecService trav = null;

foreach ( FabSpecService s in spec.Services ) {
	if ( s.Name == "Traversal" ) {
		trav = s;
		break;
	}	
}

foreach ( FabSpecTravFunc f in trav.TraversalFunctions ) {
#>
	/*================================================================================================*/
	public interface IFunc<#= f.Name #> : ITraversalStep {}

		
<#
}
#>
	/*================================================================================================*/
	public class TraversalFuncs {
	
		protected Traversal Trav { get; private set; }
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public TraversalFuncs(Traversal pTrav) {
			Trav = pTrav;
		}
		

<#
foreach ( FabSpecService s in spec.Services ) {
	if ( s.Name == "Traversal" ) {
		trav = s;
		break;
	}	
}

foreach ( FabSpecTravFunc f in trav.TraversalFunctions ) {
	string funcParams = "";
	string uriParams = "";
	string paramComments = "";
	
	foreach ( FabSpecTravFuncParam fp in f.Parameters ) {
		funcParams += (funcParams == "" ? "" : ", ");
		funcParams += fp.Type+" "+fp.Name;
		
		uriParams += (uriParams == "" ? "" : "+\",\"+");
		uriParams += fp.Name;
		
		paramComments += (paramComments == "" ? "" : "\r\n\t\t");
		paramComments += "///<param name=\""+fp.Name+"\">\r\n\t\t///  "+
			SpecBuilder.ToXmlDoc(fp.Description, false)+"\r\n\t\t///</param>";
	}
#>
		/*--------------------------------------------------------------------------------------------*/
		///<summary>
		///  <#= SpecBuilder.ToXmlDoc(f.Description, false) #>
		///</summary>
		<#= paramComments #>
		public void <#= f.Name #>(<#= funcParams #>) {
			Trav.AppendToUri("/<#= f.Name #>("+<#= uriParams #>+")");
		}
		
<#
}
#>
	}

	// ReSharper restore InconsistentNaming
	
}