<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.Clients.Cs.Spec\bin\Debug\Fabric.Clients.Cs.Spec.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Fabric.Clients.Cs.Spec" #>
<#@ import namespace="Fabric.Clients.Cs.Spec.SpecDto" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten

using System;
using System.Collections.Generic;

namespace Fabric.Clients.Cs.Api {
<#
FabSpec spec = SpecBuilder.Spec;
var specEnumMap = new Dictionary<string, FabSpecEnum>();

foreach ( FabSpecEnum e in spec.Enums ) {

	if ( e.Extends == null ) { continue; }
#>


	/*================================================================================================*/
	/// <summary/>
	public enum <#= e.Name #>Id : byte {
<#
	foreach ( Dictionary<string, object> row in e.Items ) {
		string summ = (row.ContainsKey("Name") ? row["Name"]+"" : "");

		if ( row.ContainsKey("Description") && !string.IsNullOrWhiteSpace(row["Description"]+"") ) {
			summ += ": "+row["Description"];
		}
#>
			
		/// <summary>
		///   <#= summ #>
		/// </summary>
		<#= row["EnumId"] #> = <#= row["Id"] #>,
<#
	} //end data loop
#>
	}
<#
} //end enum loop
#>


	/*================================================================================================*/
	/// <summary/>
	public static class FabEnumsData {

<#
foreach ( FabSpecEnum e in spec.Enums ) {
	specEnumMap.Add(e.Name, e);
	if ( e.Extends == null ) { continue; }
#>
		private static IDictionary<byte, <#= e.Name #>> <#= e.Name #>Map;
<#
} //end enum loop
#>


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static T TryGet<T>(IDictionary<byte, T> pMap, string pName, byte pId) {
			T data;
			
			if ( !pMap.TryGetValue(pId, out data) ) {
				throw new Exception("There is no "+pName+" data for ID="+pId+".");
			}

			return data;
		}
<#
foreach ( FabSpecEnum e in spec.Enums ) {
	if ( e.Extends == null ) { continue; }
		
	var props = new List<FabSpecObjectProp>();
	props.AddRange(specEnumMap[e.Extends].Properties);
	props.AddRange(e.Properties);
#>


		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		/// <summary />
		public static ICollection<<#= e.Name #>> Get<#= e.Name #>Items() {
			Build<#= e.Name #>Map();
			return <#= e.Name #>Map.Values;
		}
		
		/*--------------------------------------------------------------------------------------------*/
		/// <summary />
		public static <#= e.Name #> Get<#= e.Name #>(<#= e.Name #>Id pId) {
			return Get<#= e.Name #>((byte)pId);
		}

		/*--------------------------------------------------------------------------------------------*/
		/// <summary />
		public static <#= e.Name #> Get<#= e.Name #>(byte pId) {
			Build<#= e.Name #>Map();
			return TryGet(<#= e.Name #>Map, "<#= e.Name #>", pId);
		}

		/*--------------------------------------------------------------------------------------------*/
		private static void Build<#= e.Name #>Map() {
			if ( <#= e.Name #>Map != null ) {
				return;
			}
			
			<#= e.Name #>Map = new Dictionary<byte, <#= e.Name #>>();
<#
	foreach ( Dictionary<string, object> row in e.Items ) {
#>

			<#= e.Name #>Map.Add(<#= row["Id"] #>, new <#= e.Name #> {
<#
		foreach ( FabSpecObjectProp p in props ) {
			if ( !row.ContainsKey(p.Name) ) {
				continue;
			}

			string val = row[p.Name]+"";

			if ( p.Type == "string" ) {
				val = '"'+val+'"';
			}
			else if ( p.Type == "float" ) {
				val = val+"f";
			}
			else if ( p.Type == "int" || p.Type == "byte" || p.Type == "double" || p.Type == "long" ) {
			}
			else if ( p.Type.Contains("[]") ) {
				string arrayType = p.Type.Replace("[]", "");
				string[] arrayItems= val
					.Trim(new [] { '[', ']' })
					.Replace("\r\n", "")
					.Replace(" ", "")
					.Split(',');

				val = "new[] {";

				foreach ( string arrayItem in arrayItems ) {
					val += "\r\n\t\t\t\t\tGet"+arrayType+"("+arrayType+"Id."+arrayItem+"),";
				}

				val += "\r\n\t\t\t\t}";
			}
			else {
				val = "Get"+p.Type+"("+p.Type+"Id."+val+")";
			}
#>
				<#= p.Name #> = <#= val #>,
<#
		} //end prop loop
#>
			});
<#
	} //end data loop
#>
		}
<#
} //end enum loop
#>

	}

}