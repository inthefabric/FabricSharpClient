<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.Clients.Cs.Spec\bin\Debug\Fabric.Clients.Cs.Spec.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Fabric.Clients.Cs.Spec" #>
<#@ import namespace="Fabric.Clients.Cs.Spec.SpecDto" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using System.Collections.Generic;

namespace Fabric.Clients.Cs.Api {

	/*================================================================================================*/
	/// <summary/>
	public static class FabEnumsData {

<#
FabSpec spec = SpecBuilder.Spec;
var specEnumMap = new Dictionary<string, FabSpecEnum>();

foreach ( FabSpecEnum e in spec.Enums ) {
	specEnumMap.Add(e.Name, e);
	if ( e.Extends == null ) { continue; }
#>
		/// <summary/>
		public static IDictionary<byte, <#= e.Name #>> <#= e.Name #>Map;
	
<#
} //end enum loop
#>
		private static bool IsInit = Init();


		////////////////////////////////////////////////////////////////////////////////////////////////
<#		
foreach ( FabSpecEnum e in spec.Enums ) {
	if ( e.Extends == null ) { continue; }
#>
		/*--------------------------------------------------------------------------------------------*/
		/// <summary/>
		public enum <#= e.Name #>Id {
<#
	foreach ( Dictionary<string, object> row in e.Data ) {
		string summ = row["Name"]+"";

		if ( !string.IsNullOrWhiteSpace(row["Description"]+"") ) {
			summ += ": "+row["Description"];
		}
#>
			
			/// <summary>
			///   <#= summ #>
			/// </summary>
			<#= row["EnumId"] #> = <#= row["Id"] #>,
<#
	} //end data loop
#>
		}

<#
} //end enum loop
#>
	
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		private static bool Init() {
<#		
foreach ( FabSpecEnum e in spec.Enums ) {
	if ( e.Extends == null ) { continue; }
#>
			Build<#= e.Name #>Map();
<#
} //end enum loop
#>
			return true;
		}

		
		////////////////////////////////////////////////////////////////////////////////////////////////
<#		
foreach ( FabSpecEnum e in spec.Enums ) {
	if ( e.Extends == null ) { continue; }

	var props = new List<FabSpecObjectProp>();
	props.AddRange(specEnumMap[e.Extends].Properties);
	props.AddRange(e.Properties);
#>
		/*--------------------------------------------------------------------------------------------*/
		private static void Build<#= e.Name #>Map() {
			<#= e.Name #>Map = new Dictionary<byte, <#= e.Name #>>();
<#
	foreach ( Dictionary<string, object> row in e.Data ) {
#>

			<#= e.Name #>Map.Add(<#= row["Id"] #>, new <#= e.Name #> {
<#
		foreach ( FabSpecObjectProp p in props ) {
			string val = row[p.Name]+"";
			if ( p.Type == "string" ) { val = '"'+val+'"'; }
			
			if ( p.Type == "byte[]" ) {
				val = val.Substring(1, val.Length-2).Replace("\r\n", " ").Replace("  ", "");
				val = "new byte[] {"+val+"}";
			}
#>
				<#= p.Name #> = (<#= p.Type #>)<#= val #>,
<#
		} //end prop loop
#>
			});
<#
	} //end data loop
#>
		}

<#
} //end enum loop
#>

	}

}