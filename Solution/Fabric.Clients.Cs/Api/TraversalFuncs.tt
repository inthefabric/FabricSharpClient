<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.Clients.Cs.Spec/bin/Debug/Fabric.Clients.Cs.Spec.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Fabric.Clients.Cs.Spec" #>
<#@ import namespace="Fabric.Clients.Cs.Spec.SpecDto" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

namespace Fabric.Clients.Cs.Api {

	// ReSharper disable InconsistentNaming

<#
FabSpec spec = SpecBuilder.Spec;
FabSpecService trav = null;

foreach ( FabSpecService s in spec.Services ) {
	if ( s.Name == "Traversal" ) {
		trav = s;
		break;
	}	
}

foreach ( FabSpecTravFunc f in trav.TraversalFunctions ) {
#>
	/*================================================================================================*/
	/// <summary />
	public interface IHasFunc<#= f.Name #> : ITraversalStep {}

		
<#
} //end func loop
#>
	/*================================================================================================*/
	public static partial class TraversalFuncs {


		////////////////////////////////////////////////////////////////////////////////////////////////
<#
foreach ( FabSpecTravFunc f in trav.TraversalFunctions ) {
	string access = "public";
	string returns = (f.ReturnsObjectType == null ? "T" : "I"+f.ReturnsObjectType+"Step");

	switch ( f.Name ) {
		case "As":
		case "Back":
			access = "internal";
			break;
	}

	string funcParams = "";
	string uriParams = "";
	string paramComments = "/// <param name=\"PrevStep\"></param>";
	
	foreach ( FabSpecTravFuncParam fp in f.Parameters ) {
		funcParams += ", "+fp.Type+" "+fp.Name;
		uriParams += (uriParams == "" ? "" : ",")+"\"+"+fp.Name+"+\"";

		paramComments += (paramComments == "" ? "" : "\r\n\t\t");
		paramComments += "/// <param name=\""+fp.Name+"\">\r\n\t\t///   "+
			SpecBuilder.ToXmlDoc(fp.Description, false)+"\r\n\t\t/// </param>";
	}
#>
		/*--------------------------------------------------------------------------------------------*/
		/// <summary>
		///   <#= SpecBuilder.ToXmlDocSentence(f.Description) #>
		/// </summary>
		<#= paramComments #>
		<#= access #> static <#= returns #> <#= f.Name #><T>(this T PrevStep<#= funcParams #>) where T : IHasFunc<#= f.Name #> {
			PrevStep.Trav.AppendToUri("/<#= f.Name #>(<#= uriParams #>)");
<#
	if ( f.ReturnsObjectType != null ) {
#>
			return new <#= f.ReturnsObjectType #>Step(PrevStep.Trav);
<#
	}
	else {
#>
			return PrevStep;
<#
	} //end return type conditions
#>
		}
		
<#
} //end func loop
#>
	}

	// ReSharper restore InconsistentNaming
	
}