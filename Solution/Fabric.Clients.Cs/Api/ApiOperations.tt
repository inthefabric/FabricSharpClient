<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.Clients.Cs.Spec/bin/Debug/Fabric.Clients.Cs.Spec.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Fabric.Clients.Cs.Spec" #>
<#@ import namespace="Fabric.Clients.Cs.Spec.SpecDto" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using Fabric.Clients.Cs.Session;
using Fabric.Clients.Cs.Web;

namespace Fabric.Clients.Cs.Api {

	// ReSharper disable InconsistentNaming
	// ReSharper disable RedundantArgumentDefaultValue

<#
FabSpec spec = SpecBuilder.Spec;

foreach ( FabSpecService s in spec.Services ) {
	foreach ( FabSpecServiceOperation op in s.Operations ) {
		string method = op.Method.Substring(0,1)+op.Method.Substring(1).ToLower();
		string returns = op.ReturnType;

		if ( s.ResponseWrapper != null ) {
			returns = s.ResponseWrapper+"<"+returns+">";
		}

		string paramList = "";
		string paramFill = "";
		string paramComments = "";
		string query = "";
		string form = "";

		if ( op.Parameters != null ) {
			foreach ( FabSpecServiceOperationParam p in op.Parameters ) {
				if ( paramList != "" ) {
					paramList += ", ";
					paramFill += ", ";
				}

				paramList += p.Type+" "+p.Name;
				paramFill += p.Name;
				
				paramComments += "\r\n\t\t";
				paramComments += "/// <param name=\""+p.Name+"\">\r\n\t\t///   "+
					SpecBuilder.ToXmlDoc(p.Description, false)+"\r\n\t\t/// </param>";

				switch ( p.ParamType ) {

					case "Query":
						query += (query == "" ? "" : "&")+p.Name+"=\"+"+p.Name+"+\"";
						break;
						
					case "Form":
						form += (form == "" ? "" : "&")+p.Name+"=\"+"+p.Name+"+\"";
						break;
				}
			}
		}
		
		query = (query == "" ? "null" : "\""+query.Substring(0, query.Length-2));
		form = (form == "" ? "null" : "\""+form.Substring(0, form.Length-2));
#>
	/*================================================================================================*/
	/// <summary>
	///   <#= SpecBuilder.ToXmlDocSentence(op.Description) #>
	/// </summary>
	/// <remarks>
	///   <#= SpecBuilder.ToXmlDoc(op.Description, true) #>
	/// </remarks>
	public interface I<#= op.Name #>Operation : IOperation {
		
		/// <summary>
		///   Perform the operation.
		/// </summary><#= paramComments #>
		<#= returns #> <#= method #>(<#= paramList #>);

	}
	

	/*================================================================================================*/
	internal class <#= op.Name #>Operation : I<#= op.Name #>Operation {

		public const string Uri = "<#= s.Uri+op.Uri #>";
		
		public string Method { get { return "<#= op.Method #>"; } }
		public string RequiredAuth { get { return "<#= op.RequiredAuth #>"; } }
		
		private readonly IClientContext vContext;
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= op.Name #>Operation(IClientContext pContext) {
			vContext = pContext;
		}

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public FabricRequest<<#= returns #>> Request(<#= paramList #>) {
			return new FabricRequest<<#= returns #>>("<#= op.Method #>", Uri, 
				<#= query #>,
				<#= form #>
			);
		}
		
		/*--------------------------------------------------------------------------------------------*/
		public <#= returns #> <#= method #>(<#= paramList #>) {
			return Request(<#= paramFill #>).Send(vContext);
		}

	}


<#
	}
}
#>
	// ReSharper restore InconsistentNaming
	// ReSharper restore RedundantArgumentDefaultValue

}