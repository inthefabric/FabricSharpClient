<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.Clients.Cs.Spec\bin\Debug\Fabric.Clients.Cs.Spec.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Fabric.Clients.Cs.Spec" #>
<#@ import namespace="Fabric.Clients.Cs.Spec.SpecDto" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

namespace Fabric.Clients.Cs.Api {

<#
FabSpec spec = SpecBuilder.Spec;

foreach ( FabSpecObject o in spec.Objects ) {
	if ( o.Name.IndexOf("FabSpec") == 0 ) { continue; }
	if ( o.TraversalLinks == null ) { continue; }
	string interfaces = "";

	foreach ( string funcName in o.TraversalFunctions ) {
		interfaces += ", IFunc"+funcName;
	}
#>
	/*================================================================================================*/
	public interface I<#= o.Name #>Step : ITraversalStep<<#= o.Name #>><#= interfaces #> {
	
		
		////////////////////////////////////////////////////////////////////////////////////////////////
<#
	foreach ( FabSpecTravLink link in o.TraversalLinks ) {
		string summ = SpecBuilder.RemoveMarkup(link.Description).Replace("\r\n", " ");
		string step = GetStep(link);
		string conn = GetConn(link);
#>
		/*--------------------------------------------------------------------------------------------*/
		///<summary>
		///  <#= SpecBuilder.ToXmlDoc(link.Description, false) #> (<#= conn #> <#= step #>)
		///</summary>
		///<remarks>
		///  <#= SpecBuilder.ToXmlDoc(link.Description, true) #>
		///  <para>Type: <#= link.Type #></para>
		///  <para>Relation: <#= link.Relation #></para>
		///  <para>Connection: <#= conn #></para>
		///</remarks>
		I<#= step #>Step <#= link.Name #> { get; }
		
<#
	}

#>
	}
	
	
<#
}

foreach ( FabSpecObject o in spec.Objects ) {
	if ( o.Name.IndexOf("FabSpec") == 0 ) { continue; }
	if ( o.TraversalLinks == null ) { continue; }
#>
	/*================================================================================================*/
	public class <#= o.Name #>Step : TraversalStep<<#= o.Name #>>, I<#= o.Name #>Step {
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= o.Name #>Step(Traversal pTrav) : base(pTrav) {}
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
<#
	foreach ( FabSpecTravLink link in o.TraversalLinks ) {
		string summ = SpecBuilder.RemoveMarkup(link.Description).Replace("\r\n", " ");
		string step = GetStep(link);
		string conn = GetConn(link);
#>
		/*--------------------------------------------------------------------------------------------*/
		public I<#= step #>Step <#= link.Name #> {
			get {
				var s = new <#= step #>Step(Trav);
				Trav.AddStep(s);
				Trav.AppendToUri("/<#= link.Name #>");
				return s;
			}
		}
		
<#
	}
#>
	}
	
	
<#
}
#>
}
<#+
private string GetStep(FabSpecTravLink pLink) {
	return (pLink.IsOutgoing ? pLink.To : pLink.From);
}

private string GetConn(FabSpecTravLink pLink) {
	return (pLink.IsOutgoing ? pLink.FromConn : pLink.ToConn);
}
#>