<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.Clients.Cs.Spec/bin/Debug/Fabric.Clients.Cs.Spec.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Fabric.Clients.Cs.Spec" #>
<#@ import namespace="Fabric.Clients.Cs.Spec.SpecDto" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten
// Generated on <#= DateTime.Now.ToString() #>

using Fabric.Clients.Cs.Session;

namespace Fabric.Clients.Cs.Api {

<#
FabSpec spec = SpecBuilder.Spec;


foreach ( FabSpecService s in spec.Services ) {
#>
	/*================================================================================================*/
	/// <summary>
	///   <#= SpecBuilder.ToXmlDocSentence(s.Description) #>
	/// </summary>
	/// <remarks>
	///   <#= SpecBuilder.ToXmlDoc(s.Description, true) #>
	/// </remarks>
	public interface I<#= s.Name #>Service : IService {

<#
	foreach ( FabSpecServiceOperation op in s.Operations ) {
#>
		/// <summary>
		///   <#= SpecBuilder.ToXmlDocSentence(op.Description) #>
		/// </summary>
		I<#= op.Name #>Operation <#= op.Name #> { get; }

<#
	}
#>
	}


	/*================================================================================================*/
	internal class <#= s.Name #>Service : I<#= s.Name #>Service {
	
		private readonly IClientContext vContext;

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= s.Name #>Service(IClientContext pContext) {
			vContext = pContext;
		}
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
<#
	foreach ( FabSpecServiceOperation op in s.Operations ) {
#>
		/*--------------------------------------------------------------------------------------------*/
		public I<#= op.Name #>Operation <#= op.Name #> {
			get { return new <#= op.Name #>Operation(vContext); }
		}

<#
	}
#>
	}


<#
}
#>
}