<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.Clients.Cs.Spec/bin/Debug/Fabric.Clients.Cs.Spec.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Fabric.Clients.Cs.Spec" #>
<#@ import namespace="Fabric.Clients.Cs.Spec.SpecDto" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten

using Fabric.Clients.Cs.Session;

namespace Fabric.Clients.Cs.Api {

<#
FabSpec spec = SpecBuilder.Spec;


foreach ( FabSpecService s in spec.Services ) {
	bool isTrav = (s.Name == "Traversal");
#>
	/*================================================================================================*/
	/// <summary>
	///   <#= SpecBuilder.ToXmlDocSentence(s.Description) #>
	/// </summary>
	/// <remarks>
	///   <#= SpecBuilder.ToXmlDoc(s.Description, true) #>
	/// </remarks>
	public interface I<#= s.Name #>Service : IService {

<#
	foreach ( FabSpecServiceOperation op in s.Operations ) {
		string opName = s.Name+op.Name+SpecBuilder.CapitalFirst(op.Method)+"Operation";
		string type = op.Return.Replace("FabResponse", "").Trim(new[] { '<', '>' });

		if ( isTrav ) {
			opName = type+"Step";
		}
#>
		/// <summary>
		///   <#= SpecBuilder.ToXmlDocSentence(op.Description) #>
		/// </summary>
		I<#= opName #> <#= op.Name #> { get; }

<#
	}
#>
	}


	/*================================================================================================*/
	internal class <#= s.Name #>Service : I<#= s.Name #>Service {
	
		private readonly IClientContext vContext;

		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		public <#= s.Name #>Service(IClientContext pContext) {
			vContext = pContext;
		}
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////
<#
	foreach ( FabSpecServiceOperation op in s.Operations ) {
		if ( isTrav ) {
			string type = op.Return.Replace("FabResponse", "").Trim(new[] { '<', '>' });
#>
		/*--------------------------------------------------------------------------------------------*/
		public I<#= type #>Step <#= op.Name #> {
			get {
				var path = new TraversalPath(vContext, "<#= s.Uri+op.Uri #>");
				return new <#= type #>Step(path);
			}
		}

<#
		}
		else {
			string opName = s.Name+op.Name+SpecBuilder.CapitalFirst(op.Method)+"Operation";
#>
		/*--------------------------------------------------------------------------------------------*/
		public I<#= opName #> <#= op.Name #> {
			get {
				return new <#= opName #>(vContext);
			}
		}

<#
		} //end "isTrav" condition
	}
#>
	}


<#
}
#>
}