<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)Fabric.Clients.Cs.Spec\bin\Debug\Fabric.Clients.Cs.Spec.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Fabric.Clients.Cs.Spec" #>
<#@ import namespace="Fabric.Clients.Cs.Spec.SpecDto" #>
<#@ output extension=".cs" #>
// GENERATED CODE
// Changes made to this source file will be overwritten

using System;

namespace Fabric.Clients.Cs.Api {

<#
FabSpec spec = SpecBuilder.Spec;

foreach ( FabSpecObject o in spec.Objects ) {
	string extends = (o.Extends == null || o.Extends == "Object" ? "" : " : "+o.Extends);
	string part = (o.Name == "FabResponse" ? "partial " : "");
#>
	/*================================================================================================*/
	/// <summary>
	///   <#= SpecBuilder.ToXmlDocSentence(o.Description) #>
	/// </summary>
	/// <remarks>
	///   <#= SpecBuilder.ToXmlDoc(o.Description, true) #>
	/// </remarks>
	public <#= part #>class <#= o.Name+extends #> {
	
<#
	foreach ( FabSpecObjectProp p in o.Properties ) {
		string type = p.Type;
		string name = p.Name;

		if ( o.Name == "FabResponse" && p.Name == "Data" ) {
			type = "virtual object";
			name = "DataString";
		}
#>
		/// <summary>
		///   <#= SpecBuilder.ToXmlDocSentence(p.Description) #>
		/// </summary>
		public <#= type #> <#= name #> { get; set; }
		
<#
	}

	foreach ( FabSpecObjectProp p in o.Properties ) {
		if ( string.IsNullOrWhiteSpace(p.Enum) ) { continue; }
#>

		////////////////////////////////////////////////////////////////////////////////////////////////
		/*--------------------------------------------------------------------------------------------*/
		/// <summary>
		///   Get the static <#= p.Enum #> data that is associated with this object's <#= p.Name #> value.
		/// </summary>
		public <#= p.Enum #> Get<#= p.Name #>Data() {
			return FabEnumsData.Get<#= p.Enum #>(<#= p.Name #>);
		}
		
<#
	}
#>
	}

	
<#
}
#>

}